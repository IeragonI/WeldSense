from aiogram import *
from aiogram.types import Message, FSInputFile
import asyncio
import requests
from io import BytesIO
from aiogram.filters import CommandStart
# from constains import*

from ultralytics import YOLO
import matplotlib.pyplot as plt
import cv2

model_path = 'best5.pt'
token_api = "7126742135:AAEs4-OVgJGXaZK2JAe3spml5lR9AxiJHZI"
image_path = 'flower_image0.jpg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
model = YOLO(model_path)

bot = Bot(token=token_api)
dp = Dispatcher()


@dp.message(CommandStart())
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä–∫–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ. \n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ! üõ†Ô∏è"+"\n" + "")
@dp.message(F.photo)
async def handle_photo(message: Message):
    global photo_url, model, model_path, image_path
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –±–æ–ª—å—à—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    file_id = photo.file_id
    i = 0

    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file_path = await bot.get_file(file_id)
    photo_url = f"https://api.telegram.org/file/bot{token_api}/{file_path.file_path}"
    print(photo_url)
    response = requests.get(photo_url)
    if response.status_code == 200:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
        with open(f"flower_image{i}.jpg", "wb") as file:
            file.write(response.content)
            # driveSkript(i)
            i += 1

            file.close()
        print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ flower_image.jpg")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    # await message.answer(f"URL –∞–¥—Ä–µ—Å —Ñ–æ—Ç–æ: {photo_url}")
    results = model.predict(source=image_path)
    file = BytesIO()

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    predicted_image = results[0].save('flower.jpg') # –ú–µ—Ç–æ–¥ plot() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    file.seek(0)
    file = FSInputFile('flower.jpg', filename='photo.jpg')


    predicted_classes = [model.names[int(cls)] for cls in results[0].boxes.cls.cpu().numpy()]  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

    await message.answer_photo(file)
    if len(predicted_classes) == 0:
        await message.answer("–°–≤–∞—Ä–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    for predict in range(0, len(predicted_classes)):
        if (predicted_classes[predict] == 'Good Welding'):
            for r in model(image_path):
                for x in range(0,4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'True\nGood Welding:\n{string}')
        elif (predicted_classes[predict] == 'Bad Welding'):
            for r in model(image_path):
                for x in range(0, 4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'Flase\nBad Welding:\n{string}')
        elif (predicted_classes[predict] == 'Crack'):
            for r in model(image_path):
                for x in range(0, 4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'Crack:\n{string}')
        elif (predicted_classes[predict] == 'Excess Reinforcement'):
            for r in model(image_path):
                for x in range(0,4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'Flase\nExcess Reinforcement:\n{string}')
                # await message.answer(f'Excess Reinforcement:\n{r.boxes.xywh.cpu().numpy()[predict]}')
        elif (predicted_classes[predict] == 'Porosity'):
            for r in model(image_path):
                for x in range(0,4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'Flase\nPorosity:\n{string}')
                # await message.answer(f'Porosity:\n{r.boxes.xywh.cpu().numpy()[predict]}')
        elif (predicted_classes[predict] == 'Spatters'):
            for r in model(image_path):
                for x in range(0,4):
                    if x == 0:
                        string = f'Start x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 1:
                        string += f'\nStart y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 2:
                        string += f'\nEnd x: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                    elif x == 3:
                        string += f'\nEnd y: {r.boxes.xyxy.cpu().numpy()[predict][x]}'
                await message.answer(f'Flase\nSpatters:\n{string}')
                # await message.answer(f'Spatters:\n{r.boxes.xywh.cpu().numpy()[predict]}')




                # await message.answer(f'{r.boxes.xywh.cpu().numpy()[predict]}')
            # await message.answer_photo(file)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

# 7126742135:AAEs4-OVgJGXaZK2JAe3spml5lR9AxiJHZI
  